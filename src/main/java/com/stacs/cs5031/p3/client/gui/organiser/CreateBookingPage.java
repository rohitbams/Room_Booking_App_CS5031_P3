package com.stacs.cs5031.p3.client.gui.organiser;

import javax.swing.*;
import javax.swing.text.DateFormatter;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClient;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.stacs.cs5031.p3.server.dto.RoomDto;
import com.stacs.cs5031.p3.server.dto.BookingDto;
import com.stacs.cs5031.p3.server.dto.UserDto;
import com.stacs.cs5031.p3.client.gui.helper_classes.CustomFontLoader;
import com.stacs.cs5031.p3.client.gui.helper_classes.OnFocusEventHelper;
import com.stacs.cs5031.p3.client.gui.helper_classes.RoundedBorder;

/**
 * This class is responsible for creating the create booking page.
 * Part of this code (i.e basic element layout code) was generated by GUI
 * Builder, "Window Builder for
 * JavaFx/Swing" extension in vscode.
 * 
 * @author 190031593
 */
public class CreateBookingPage {

  /**
   * This is the constructor of the CreateBookingPage class.
   */
  public CreateBookingPage(UserDto user) {
    int organiserId = user.getId();
    if (organiserId <= 0) {
      System.out.println("Please provide a valid organiser id.");
      return;
    }

    createPage(organiserId, user);

  }

  /**
   * This method is responsible for creating the create booking page.
   * 
   * @param organiserId - the id of the organiser
   * @param user        - the user details
   * 
   */
  public static void createPage(int organiserId, UserDto user) {
    JFrame frame = new JFrame("Create New Booking");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(1143, 617);
    frame.setLocationRelativeTo(null);

    JPanel panel = new JPanel();
    panel.setLayout(null);
    panel.setBackground(Color.decode("#f4c064"));

    PageElements pageElements = new PageElements(organiserId, user, panel, frame);
    pageElements.addAllElements();

    frame.add(panel);
    frame.setVisible(true);

  }

  /**
   * This class is responsible for creating the elements of the create booking
   * page.
   * It contains methods to create and add the elements to the panel.
   */
  public static class PageElements {
    private JPanel panel; // The panel to which the elements will be added
    private static final String BASE_URL = "http://localhost:8080/"; // Base URL of the server
    private static final int MAX_DURATION = 8; // Maximum duration in hours
    private HashMap<String, Integer> rooms = new HashMap<String, Integer>(); // HashMap to store the rooms
    private RestClient restClient = RestClient.create();
    private int organiserId; // id of the organiser
    private JFrame frame; // The frame to which the panel will be added
    private UserDto user; // The user details

    /**
     * This is the constructor of the PageElements class.
     * 
     * @param panel       - the panel to which the elements will be added
     * @param organiserId - the id of the organiser
     */
    public PageElements(int organiserId, UserDto user, JPanel panel, JFrame frame) {
      this.panel = panel;
      this.organiserId = organiserId;
      this.frame = frame;
      this.user = user;
      getRooms();
    }

    /**
     * This method creates and adds all the elements to the panel.
     */
    public void addAllElements() {
      JComboBox<String> roomDropDown = addRoomDropDown();
      JTextField eventNameInput = addEventInput();
      JTextField durationInput = addDurationInput();
      JFormattedTextField dateInput = addDatePicker();

      addCreateBookingLbl();
      addEventNameLbl();
      addRoomLbl();
      addDateLbl();
      addDurationLbl();
      addSubmitButton(eventNameInput, roomDropDown, durationInput, dateInput);
      addBackButton();

    }

    /**
     * This method creates and adds the event name input field to the panel.
     */
    private JTextField addEventInput() {
      JTextField eventNameInput = new JTextField("");
      eventNameInput.setBounds(537, 192, 309, 26);
      eventNameInput.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 16));
      eventNameInput.setBackground(Color.decode("#ffe7bf"));
      eventNameInput.setForeground(Color.decode("#73664e"));
      eventNameInput.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));
      OnFocusEventHelper.setOnFocusText(eventNameInput, "", Color.decode("#000"), Color.decode("#73664e"));
      panel.add(eventNameInput);
      return eventNameInput;
    }

    /**
     * This method creates and adds the duration label to the panel.
     */
    private void addDurationLbl() {
      JLabel durationLbl = new JLabel("Duration");
      durationLbl.setBounds(345, 394, 216, 43);
      durationLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 25));
      durationLbl.setForeground(Color.decode("#000"));

      JLabel hrsLbl = new JLabel("(hrs)");
      hrsLbl.setBounds(420, 410, 200, 54);
      hrsLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 15));
      hrsLbl.setForeground(Color.decode("#808080"));
      panel.add(hrsLbl);
      panel.add(durationLbl);
    }

    /**
     * This method creates and adds the date label to the panel.
     */
    private void addDateLbl() {
      JLabel dateLbl = new JLabel("Date and Time");
      dateLbl.setBounds(280, 324, 200, 54);
      dateLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 25));
      dateLbl.setForeground(Color.decode("#000"));

      JLabel dateformatLbl = new JLabel("(dd/MM/yyyy HH:mm)");
      dateformatLbl.setBounds(310, 345, 200, 54);
      dateformatLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 15));
      dateformatLbl.setForeground(Color.decode("#808080"));

      panel.add(dateLbl);
      panel.add(dateformatLbl);

    }

    /**
     * This method creates and adds the room label to the panel.
     */
    private void addRoomLbl() {

      JLabel roomLbl = new JLabel("Room");
      roomLbl.setBounds(391, 261, 115, 35);
      roomLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 25));
      roomLbl.setForeground(Color.decode("#000"));
      panel.add(roomLbl);

    }

    /**
     * This method creates and adds the event name label to the panel.
     */
    private void addEventNameLbl() {
      JLabel eventNameLbl = new JLabel("Event Name");
      eventNameLbl.setBounds(307, 187, 238, 35);
      eventNameLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 25));
      eventNameLbl.setForeground(Color.decode("#000"));
      panel.add(eventNameLbl);

    }

    /**
     * This method creates and adds the create booking label to the panel.
     */
    private void addCreateBookingLbl() {

      JLabel createBookingLbl = new JLabel("Create New Booking");
      createBookingLbl.setBounds(337, 58, 558, 68);
      createBookingLbl.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 40));
      createBookingLbl.setForeground(Color.decode("#000"));
      panel.add(createBookingLbl);

    }

    /**
     * This method creates and adds the room dropdown to the panel.
     */
    private JComboBox<String> addRoomDropDown() {

      Object[] roomsObjArr = rooms.keySet().toArray();
      String[] roomsArr = Arrays.copyOf(roomsObjArr, roomsObjArr.length, String[].class);
      JComboBox<String> roomInput = new JComboBox<String>(roomsArr);
      roomInput.setBounds(537, 261, 309, 26);
      roomInput.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 16));
      roomInput.setBackground(Color.decode("#ffe7bf"));
      roomInput.setForeground(Color.decode("#73664e"));
      roomInput.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));
      panel.add(roomInput);
      return roomInput;
    }

    /**
     * This method creates and adds the submit button to the panel and its onclick
     * behaviour.
     * 
     */
    private void addSubmitButton(JTextField eventNameInput, JComboBox<String> roomInput, JTextField durationInput,
        JFormattedTextField dateInput) {
      JButton submitBtn = new JButton("Submit");
      submitBtn.setBounds(490, 470, 150, 50);
      submitBtn.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 15));
      submitBtn.setBackground(Color.decode("#bca8e4"));
      submitBtn.setForeground(Color.decode("#000"));
      submitBtn.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));

      submitBtn.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          String event = eventNameInput.getText();
          String room = roomInput.getSelectedItem() != null ? roomInput.getSelectedItem().toString() : null;
          String date = dateInput.getText();
          String duration = durationInput.getText();
          if (validateInput(event, room, date, duration)) {
            createBooking(event, rooms.get(room), parseDate(date), Integer.parseInt(duration));
          }
        }
      });
      panel.add(submitBtn);
    }

    /**
     * This method creates and adds the back button to the panel and its onclick
     * behaviour.
     */
    private void addBackButton() {
      JButton backBtn = new JButton("<");
      backBtn.setBounds(25, 20, 50, 25);
      backBtn.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 20));
      backBtn.setBackground(Color.decode("#ffe7bf"));
      backBtn.setForeground(Color.decode("#73664e"));
      backBtn.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));

      backBtn.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          new OrganiserHomePage(user);
          frame.dispose();
        }
      });
      panel.add(backBtn);
    }

    /**
     * This method creates and adds the duration input field to the panel.
     * 
     * @return - the duration input field
     */
    private JTextField addDurationInput() {
      JTextField durationInput = new JTextField("");
      durationInput.setBounds(537, 404, 30, 26);
      durationInput.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 16));
      durationInput.setBackground(Color.decode("#ffe7bf"));
      durationInput.setForeground(Color.decode("#73664e"));
      durationInput.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));
      OnFocusEventHelper.setOnFocusText(durationInput, "", Color.decode("#000"), Color.decode("#73664e"));
      panel.add(durationInput);
      return durationInput;
    }

    /**
     * This method validates the input fields.
     * 
     * @param eventName - name of the event
     * @param room      - name of the room
     * @param date      - date of the booking
     * @param duration  - duration of the booking in hours
     * @return - true if the input is valid, false otherwise
     */
    private boolean validateInput(String eventName, String room, String date, String durationAsString) {

      if (eventName == null || eventName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Event name is invalid!", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
      }

      if (room == null || room.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Room is invalid!", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
      }

      int roomId = rooms.get(room);
      if (roomId == 0) {
        JOptionPane.showMessageDialog(null, "Room is invalid!", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
      }

      if (date == null || date.isEmpty()) {

        JOptionPane.showMessageDialog(null, "Date is invalid!", "Error", JOptionPane.ERROR_MESSAGE);
        return false;

      }

      Date parsedDate = parseDate(date);
      if (parsedDate.before(new Date())) {
        JOptionPane.showMessageDialog(null, "Date cannot be in the past!", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
      }

      int duration = convertDuration(durationAsString);
      if (duration < 1 || duration > MAX_DURATION) {
        JOptionPane.showMessageDialog(null,
            "Duration is invalid! A booking can be between 1 to " + MAX_DURATION + " hours.", "Error",
            JOptionPane.ERROR_MESSAGE);
        return false;
      }

      return true;

    }

    /**
     * This method converts the duration from string to int.
     * 
     * @param duration - duration of the booking in hours
     * @return - duration of the booking in hours as an int
     */
    private int convertDuration(String duration) {
      int durationInt = 0;
      try {
        durationInt = Integer.parseInt(duration);
      } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Duration is invalid! Please enter a valid number.", "Error",
            JOptionPane.ERROR_MESSAGE);
      }
      return durationInt;
    }

    /**
     * This method parses a date string into a Date object.
     * 
     * @param dateString - the date string to parse
     * @return - the parsed Date object or null if parsing fails
     */
    private Date parseDate(String dateString) {
      SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");

      try {
        return dateFormat.parse(dateString);
      } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Date is invalid! Please enter a valid date in dd/MM/yyyy HH:mm format.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        return null;
      }
    }

    /**
     * This method creates a booking.
     * 
     * @param eventName - name of the event
     * @param roomId    - id of the room
     * @param date      - date of the booking
     * @param duration  - duration of the booking in hours
     */
    private void createBooking(String eventName, int roomId, Date date, int duration) {
      duration = duration * 60;
      BookingDto.BookingRequest bookingDto = new BookingDto.BookingRequest(eventName, (long) roomId, date, duration,
          "");

      try {
        ResponseEntity<String> res = restClient.post()
            .uri(BASE_URL + "organiser/create-booking/" + organiserId)
            .contentType(MediaType.APPLICATION_JSON)
            .body(bookingDto)
            .retrieve()
            .toEntity(String.class);

        if (res.getStatusCode() == HttpStatus.CREATED) {
          int confirmation = JOptionPane.showConfirmDialog(null, "Booking created successfully!",
              "Success", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
          if (confirmation == JOptionPane.OK_OPTION) {
            new OrganiserHomePage(user);
            frame.dispose();
          }
        } else {
          JOptionPane.showMessageDialog(null, res.getBody(), "Error",
              JOptionPane.ERROR_MESSAGE);
        }
      } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
            JOptionPane.ERROR_MESSAGE);
      }
    }

    /**
     * This method is called to get the list of rooms from the server.
     */
    private void getRooms() {
      try {
        ResponseEntity<ArrayList<RoomDto>> res = restClient.get()
            .uri(BASE_URL + "organiser/available-rooms")
            .retrieve()
            .toEntity(new ParameterizedTypeReference<>() {
            });

        if (res.getStatusCode() == HttpStatus.OK) {

          List<RoomDto> roomList = res.getBody();

          // Check if the room list is null
          if (roomList == null) {
            JOptionPane.showMessageDialog(null, "No rooms available!", "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
          }

          for (RoomDto room : roomList) {
            System.out.println(room.getName());
            rooms.put(room.getName(), room.getId());
          }
        } else {
          JOptionPane.showMessageDialog(null, res.getBody(), "Error",
              JOptionPane.ERROR_MESSAGE);
        }
      } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
            JOptionPane.ERROR_MESSAGE);
      }
    }

    /**
     * This method creates and adds the date picker to the panel.
     * 
     * @return - the date picker
     */
    private JFormattedTextField addDatePicker() {

      SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
      dateFormat.setLenient(false);

      DateFormatter dateFormatter = new DateFormatter(dateFormat);
      dateFormatter.setAllowsInvalid(true);

      JFormattedTextField dateInput = new JFormattedTextField(dateFormatter);
      dateInput.setColumns(10);
      dateInput.setBounds(537, 334, 309, 26);
      dateInput.setFont(CustomFontLoader.loadFont("./resources/fonts/Lexend.ttf", 16));
      dateInput.setBackground(Color.decode("#ffe7bf"));
      dateInput.setForeground(Color.decode("#73664e"));
      dateInput.setBorder(new RoundedBorder(2, Color.decode("#000"), 1));
      panel.add(dateInput);
      return dateInput;

    }
  }

}
