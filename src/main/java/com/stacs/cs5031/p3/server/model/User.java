package com.stacs.cs5031.p3.server.model;

import jakarta.persistence.*;

/**
 * The User class.
 * This class represents a user in the system and handles persistence in the database.
 * It serves as the base class for different types of users (e.g., Attendee, Organiser).
 * 
 * <p>This class uses JPA annotations for ORM mapping and implements inheritance
 * using the JOINED strategy, where each subclass has its own table that joins with
 * the parent table.</p>
 */
@Entity
@Table(name = "app_user")
@Inheritance(strategy = InheritanceType.JOINED)
@DiscriminatorColumn(name = "user_type", discriminatorType = DiscriminatorType.STRING)
public class User {

    /**
     * The unique identifier for the user.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * The full name of the user.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private String name;
    
    /**
     * The username used for authentication.
     * This field cannot be null and must be unique across all users.
     */
    @Column(nullable = false, unique = true)
    private String username;
    
    /**
     * The password used for authentication.
     * This field cannot be null.
     * Note: In a production environment, passwords should be stored securely (hashed and salted).
     */
    @Column(nullable = false)
    private String password;
    
    // Commented out role field
    // @Column(nullable = false)
    // private String role;

    /**
     * Default constructor required by JPA.
     * Protected to prevent direct instantiation without parameters.
     */
    protected User() {
    }

    /**
     * Constructs a new User with the specified name, username, and password.
     *
     * @param name     the full name of the user
     * @param username the unique username for the user
     * @param password the password for authentication
     */
    public User(String name, String username, String password) {
        this.name = name;
        this.username = username;
        this.password = password;
    }

    /**
     * Gets the unique identifier of the user.
     *
     * @return the user's ID
     */
    public Integer getId() {
        return id;
    }

    /**
     * Gets the full name of the user.
     *
     * @return the user's name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the username of the user.
     *
     * @return the user's username
     */
    public String getUsername() {
        return username;
    }

    /**
     * Gets the password of the user.
     *
     * @return the user's password
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the name of the user.
     *
     * @param name the new name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the username of the user.
     *
     * @param username the new username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Sets the password of the user.
     *
     * @param password the new password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }

    // Commented out role methods
    // public void setRole(String role) {
    //     this.role = role;
    // }
    //
    // public String getRole() {
    //     return role;
    // }
}
